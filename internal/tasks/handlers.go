package tasks

import (
	"fmt"
	"net/http"
	"time"

	"github.com/Anabol1ks/Lamadjo-Task-Board/internal/models"
	"github.com/Anabol1ks/Lamadjo-Task-Board/internal/notification"
	"github.com/Anabol1ks/Lamadjo-Task-Board/internal/response"
	"github.com/Anabol1ks/Lamadjo-Task-Board/internal/storage"
	"github.com/gin-gonic/gin"
)

type TaskInput struct {
	Title       string    `json:"title" binding:"required"`
	Description string    `json:"description" binding:"required"`
	Deadline    time.Time `json:"deadline" binding:"required"` //RFC 3339
	IsTeam      bool      `json:"is_team"`
	AssignedTo  *string   `json:"assigned_to"`
}

// CreateTaskHandlres —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
// @Summary –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
// @Description –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ
// @Tags tasks
// @Accept json
// @Produce json
// @Param telegram_id query string true "Telegram ID —É–ø—Ä–∞–≤–ª—è—é—â–µ–≥–ær"
// @Param task body TaskInput true "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞–¥–∞—á–∏"
// @Success 200 {object} response.SuccessResponse "–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞"
// @Failure 400 {object} response.ErrorResponse "telegram_id is required"
// @Failure 400 {object} response.ErrorResponse "–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã"
// @Failure 400 {object} response.ErrorResponse "assigned_to –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á"
// @Failure 401 {object} response.ErrorResponse "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
// @Failure 403 {object} response.ErrorResponse "–¢–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–¥–∞—á—É"
// @Failure 500 {object} response.ErrorResponse "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏"
// @Router /tasks [post]
func CreateTaskHandlres(c *gin.Context) {
	telegramID := c.Query("telegram_id")
	if telegramID == "" {
		c.JSON(http.StatusBadRequest, gin.H{"error": "telegram_id is required"})
		return
	}

	var user models.User
	if err := storage.DB.Where("telegram_id = ?", telegramID).First(&user).Error; err != nil {
		c.JSON(http.StatusUnauthorized, gin.H{"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"})
		return
	}
	if user.Role != "manager" {
		c.JSON(http.StatusForbidden, gin.H{"error": "–¢–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–¥–∞—á—É"})
		return
	}
	if user.TeamID == nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã"})
		return
	}

	var input TaskInput
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	if !input.IsTeam && input.AssignedTo == nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "assigned_to –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á"})
		return
	}

	var task = models.Task{
		Title:       input.Title,
		Description: input.Description,
		Deadline:    input.Deadline,
		IsTeam:      input.IsTeam,
		AssignedTo:  input.AssignedTo,
		TeamID:      *user.TeamID,
		CreatedBy:   user.ID,
	}

	if err := storage.DB.Create(&task).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏"})
		return
	}

	var notificationText string
	if input.IsTeam {
		notificationText = fmt.Sprintf(
			"üöÄ *–ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–Ω–∞—è –∑–∞–¥–∞—á–∞!*\n\n"+
				"‚ñ´Ô∏è *–ó–∞–≥–æ–ª–æ–≤–æ–∫:* %s\n"+
				"‚ñ´Ô∏è *–û–ø–∏—Å–∞–Ω–∏–µ:* \n_%s_\n"+
				"‚ñ´Ô∏è *–î–µ–¥–ª–∞–π–Ω:* %s\n"+
				"‚ñ´Ô∏è *–¢–∏–ø:* –û–±—â–∞—è –∑–∞–¥–∞—á–∞ –∫–æ–º–∞–Ω–¥—ã\n\n"+
				"üïë –°–æ–∑–¥–∞–Ω–æ: %s",
			(task.Title),
			(task.Description),
			notification.FormatDeadline(task.Deadline),
			time.Now().Format("02.01.2006 15:04"),
		)

		var teamUsers []models.User
		if err := storage.DB.Where("team_id = ?", user.TeamID).Find(&teamUsers).Error; err != nil {
			fmt.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã: %v\n", err)
		}

		for _, u := range teamUsers {
			if u.TelegramID != "" {
				go func(chatID string) {
					if err := notification.SendTelegramNotification(chatID, notificationText); err != nil {
						fmt.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s: %v\n", chatID, err)
					}
				}(u.TelegramID)
			}
		}
	} else {
		notificationText = fmt.Sprintf(
			"üìå *–ù–æ–≤–∞—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞!*\n\n"+
				"‚ñ´Ô∏è *–ó–∞–≥–æ–ª–æ–≤–æ–∫:* %s\n"+
				"‚ñ´Ô∏è *–û–ø–∏—Å–∞–Ω–∏–µ:* \n_%s_\n"+
				"‚ñ´Ô∏è *–î–µ–¥–ª–∞–π–Ω:* %s\n"+
				"‚ñ´Ô∏è *–ù–∞–∑–Ω–∞—á–µ–Ω–∞:* –í–∞–º –ª–∏—á–Ω–æ\n\n"+
				"üïë –°–æ–∑–¥–∞–Ω–æ: %s",
			task.Title,
			task.Description,
			notification.FormatDeadline(task.Deadline),
			time.Now().Format("02.01.2006 15:04"),
		)

		var assignedUser models.User
		if err := storage.DB.Where("telegram_id = ?", input.AssignedTo).First(&assignedUser).Error; err != nil {
			fmt.Printf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: %v\n", err)
			return
		}

		if assignedUser.TelegramID != "" {
			if err := notification.SendTelegramNotification(assignedUser.TelegramID, notificationText); err != nil {
				fmt.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s: %v\n", assignedUser.TelegramID, err)
			}
		}
	}

	c.JSON(http.StatusOK, gin.H{"message": "–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞"})
}

// GetTasksHandlres –ø–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// @Summary –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
// @Description –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// @Tags tasks
// @Accept json
// @Produce json
// @Param telegram_id query string true "Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
// @Success 200 {object} []response.TaskResponse "–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á"
// @Failure 400 {object} response.ErrorResponse "telegram_id is required"
// @Failure 401 {object} response.ErrorResponse "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
// @Failure 500 {object} response.ErrorResponse "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á"
// @Router /tasks [get]
func GetTasksHandlres(c *gin.Context) {
	telegramID := c.Query("telegram_id")
	if telegramID == "" {
		c.JSON(http.StatusBadRequest, gin.H{"error": "telegram_id is required"})
		return
	}

	var user models.User
	if err := storage.DB.Where("telegram_id = ?", telegramID).First(&user).Error; err != nil {
		c.JSON(http.StatusUnauthorized, gin.H{"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"})
		return
	}

	var tasks []models.Task
	if err := storage.DB.Where("team_id = ?", user.TeamID).Find(&tasks).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á"})
		return
	}
	if err := storage.DB.Where("assigned_to = ?", user.TelegramID).Find(&tasks).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á"})
		return
	}

	var responseTasks []response.TaskResponse
	for _, task := range tasks {
		responseTasks = append(responseTasks, response.TaskResponse{
			ID:          task.ID,
			Title:       task.Title,
			Description: task.Description,
			Deadline:    task.Deadline,
			Status:      task.Status,
			IsTeam:      task.IsTeam,
			AssignedTo:  task.AssignedTo,
			CreatedBy:   task.CreatedBy,
			TeamID:      task.TeamID,
		})
	}

	c.JSON(http.StatusOK, responseTasks)
}

// DeleteTaskHandler —É–¥–∞–ª—è–µ—Ç –∑–∞–¥–∞—á—É
// @Summary –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
// @Description –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –∫–æ–º–∞–Ω–¥—ã
// @Tags tasks
// @Accept json
// @Produce json
// @Param telegram_id query string true "Telegram ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞"
// @Param id path string true "ID –∑–∞–¥–∞—á–∏"
// @Success 200 {object} response.SuccessResponse "–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞"
// @Failure 400 {object} response.ErrorResponse "Error: telegram_id is required CODE: NOT_TG_ID"
// @Failure 400 {object} response.ErrorResponse "Error: task_id is required CODE: NOT_TASK_ID"
// @Failure 400 {object} response.ErrorResponse "Error: –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã CODE: NOT_TEAM"
// @Failure 401 {object} response.ErrorResponse "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
// @Failure 403 {object} response.ErrorResponse "–¢–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –∑–∞–¥–∞—á—É"
// @Failure 403 {object} response.ErrorResponse "–ó–∞–¥–∞—á—É —Å–æ–∑–¥–∞–ª–∏ –Ω–µ –≤—ã"
// @Failure 500 {object} response.ErrorResponse "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
// @Router /tasks/{id} [delete]
func DeleteTaskHandler(c *gin.Context) {
	telegramID := c.Query("telegram_id")
	taskID := c.Param("id")
	if telegramID == "" {
		c.JSON(http.StatusBadRequest, gin.H{"error": "telegram_id is required", "code": "NOT_TG_ID"})
		return
	}

	if taskID == "" {
		c.JSON(http.StatusBadRequest, gin.H{"error": "task_id is required", "code": "NOT_TASK_ID"})
		return
	}

	var user models.User
	if err := storage.DB.Where("telegram_id = ?", telegramID).First(&user).Error; err != nil {
		c.JSON(http.StatusUnauthorized, gin.H{"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"})
		return
	}
	if user.Role != "manager" {
		c.JSON(http.StatusForbidden, gin.H{"error": "–¢–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É"})
		return
	}
	if user.TeamID == nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã", "code": "NOT_TEAM"})
		return
	}

	var task models.Task
	if err := storage.DB.First(&task, taskID).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"})
		return
	}

	if task.CreatedBy != user.ID {
		c.JSON(http.StatusForbidden, gin.H{"error": "–ó–∞–¥–∞—á—É —Å–æ–∑–¥–∞–ª–∏ –Ω–µ –≤—ã"})
		return
	}

	var notificationText string
	if task.IsTeam {
		notificationText = fmt.Sprintf(
			"üöÄ *–ö–æ–º–∞–Ω–¥–Ω–∞—è –∑–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!*\n\n"+
				"‚ñ´Ô∏è *–ó–∞–≥–æ–ª–æ–≤–æ–∫:* %s\n"+
				"‚ñ´Ô∏è *–û–ø–∏—Å–∞–Ω–∏–µ:* \n_%s_\n",
			task.Title,
			task.Description,
		)
		var teamUsers []models.User
		if err := storage.DB.Where("team_id = ?", task.TeamID).Find(&teamUsers).Error; err != nil {
			// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏, –Ω–æ –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ç–æ–º—É, –∫–æ–≥–æ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏
			fmt.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã: %v\n", err)
		}
		for _, u := range teamUsers {
			if u.TelegramID != "" {
				go func(chatID string) {
					if err := notification.SendTelegramNotification(chatID, notificationText); err != nil {
						fmt.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s: %v\n", chatID, err)
					}
				}(u.TelegramID)
			}
		}
	} else {
		notificationText = fmt.Sprintf(
			"üöÄ *–í–∞—à—É –∑–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–∏–ª–∏!*\n\n"+
				"‚ñ´Ô∏è *–ó–∞–≥–æ–ª–æ–≤–æ–∫:* %s\n"+
				"‚ñ´Ô∏è *–û–ø–∏—Å–∞–Ω–∏–µ:* \n_%s_\n"+
				(task.Title),
			(task.Description),
		)
		var assignedUser models.User
		if err := storage.DB.Where("telegram_id = ?", task.AssignedTo).First(&assignedUser).Error; err != nil {
			fmt.Printf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: %v\n", err)
			return
		}

		if assignedUser.TelegramID != "" {
			if err := notification.SendTelegramNotification(assignedUser.TelegramID, notificationText); err != nil {
				fmt.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s: %v\n", assignedUser.TelegramID, err)
			}
		}
	}

	if err := storage.DB.Delete(&task).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"})
		return
	}

	c.JSON(http.StatusOK, gin.H{"message": "–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞"})
}

type UpdateTaskStatusInput struct {
	Status         string `json:"status" binding:"required"` // –û–∂–∏–¥–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: "in_progress" –∏–ª–∏ "completed"
	CompletionText string `json:"completion_text"`           // –û—Ç—á—ë—Ç –ø–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
	Attachment     string `json:"attachment"`                // –°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–ª–æ–∂–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
}

// UpdateTaskStatusHandler –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏.
// –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è "completed", –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É –∫–æ–º–∞–Ω–¥—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –æ—Ç—á—ë—Ç–∞ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–º, –∫—Ç–æ –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–¥–∞—á—É.
// UpdateTaskStatusHandler –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
// @Summary –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
// @Description –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –∑–∞–¥–∞—á–∏
// @Tags tasks
// @Accept json
// @Produce json
// @Param telegram_id query string true "Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
// @Param id path string true "ID –∑–∞–¥–∞—á–∏"
// @Param task body UpdateTaskStatusInput true "–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞"
// @Success 200 {object} response.SuccessResponse "–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω"
// @Failure 400 {object} response.ErrorCodeResponse "Error: telegram_id is required CODE: NOT_TG_ID"
// @Failure 400 {object} response.ErrorCodeResponse "Error: task_id is required CODE: NOT_TASK_ID"
// @Failure 400 {object} response.ErrorCodeResponse "Error: –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã CODE: NOT_TEAM"
// @Failure 400 {object} response.ErrorResponse "–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞"
// @Failure 401 {object} response.ErrorResponse "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
// @Failure 403 {object} response.ErrorResponse "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —ç—Ç–æ–π –∑–∞–¥–∞—á–∏"
// @Failure 404 {object} response.ErrorResponse "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
// @Failure 500 {object} response.ErrorResponse "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏"
// @Router /tasks/{id}/status [put]
func UpdateTaskStatusHandler(c *gin.Context) {
	telegramID := c.Query("telegram_id")
	if telegramID == "" {
		c.JSON(http.StatusBadRequest, gin.H{"error": "telegram_id is required"})
		return
	}

	taskID := c.Param("id")
	if taskID == "" {
		c.JSON(http.StatusBadRequest, gin.H{"error": "task_id is required"})
		return
	}

	// –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ TelegramID
	var user models.User
	if err := storage.DB.Where("telegram_id = ?", telegramID).First(&user).Error; err != nil {
		c.JSON(http.StatusUnauthorized, gin.H{"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"})
		return
	}

	// –ü–æ–∏—Å–∫ –∑–∞–¥–∞—á–∏ –ø–æ ID
	var task models.Task
	if err := storage.DB.First(&task, taskID).Error; err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"})
		return
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤: –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è, —Ç–æ –∏–∑–º–µ–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫.
	if !task.IsTeam {
		if task.AssignedTo == nil || *task.AssignedTo != user.TelegramID {
			c.JSON(http.StatusForbidden, gin.H{"error": "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —ç—Ç–æ–π –∑–∞–¥–∞—á–∏"})
			return
		}
	} else {
		// –î–ª—è –∫–æ–º–∞–Ω–¥–Ω–æ–π –∑–∞–¥–∞—á–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –∫–æ–º–∞–Ω–¥–µ.
		if user.TeamID == nil || *user.TeamID != task.TeamID {
			c.JSON(http.StatusForbidden, gin.H{"error": "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —ç—Ç–æ–π –∑–∞–¥–∞—á–∏"})
			return
		}
	}

	// –°—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
	var input UpdateTaskStatusInput
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞—Ç—É—Å –∏–º–µ–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.
	if input.Status != "in_progress" && input.Status != "completed" {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞. –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: in_progress, completed"})
		return
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –≤ –ë–î
	task.Status = input.Status
	if err := storage.DB.Save(&task).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏"})
		return
	}

	// –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ "completed", –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É.
	if input.Status == "completed" {
		// –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –ø–æ–ª–µ CreatedBy –≤ –∑–∞–¥–∞—á–µ —Å–æ–¥–µ—Ä–∂–∏—Ç ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞, —Å–æ–∑–¥–∞–≤—à–µ–≥–æ –∑–∞–¥–∞—á—É.
		var manager models.User
		if err := storage.DB.First(&manager, task.CreatedBy).Error; err != nil {
			c.JSON(http.StatusOK, gin.H{"message": "–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω, –Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"})
			return
		}

		// –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ –æ—Ç—á—ë—Ç–∞ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π, –∫—Ç–æ –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–¥–∞—á—É.
		notificationText := fmt.Sprintf(
			"‚úÖ *–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!*\n\n‚ñ´Ô∏è *–ó–∞–≥–æ–ª–æ–≤–æ–∫:* %s\n‚ñ´Ô∏è *–û–ø–∏—Å–∞–Ω–∏–µ:* %s\n‚ñ´Ô∏è *–°—Ç–∞—Ç—É—Å:* –≤—ã–ø–æ–ª–Ω–µ–Ω–æ\n‚ñ´Ô∏è *–í—ã–ø–æ–ª–Ω–∏–ª:* %s\n\n*–û—Ç—á–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞:*\n%s",
			task.Title,
			task.Description,
			user.Name, // –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–≤–µ—Ä—à–∏–ª –∑–∞–¥–∞—á—É
			input.CompletionText,
		)
		if input.Attachment != "" {
			notificationText += fmt.Sprintf("\n‚ñ´Ô∏è *–í–ª–æ–∂–µ–Ω–∏–µ:* %s", input.Attachment)
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É —á–µ—Ä–µ–∑ Telegram (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ).
		if manager.TelegramID != "" {
			go func(chatID string) {
				if err := notification.SendTelegramNotification(chatID, notificationText); err != nil {
					fmt.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä—É %s: %v\n", chatID, err)
				}
			}(manager.TelegramID)
		}
	}

	c.JSON(http.StatusOK, gin.H{"message": "–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω"})
}

// @Summary –ü–æ–ª—É—á–∏—Ç—å –≤—ã–¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
// @Description –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á, —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram —Å —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± –∏—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏.
// @Tags tasks
// @Accept json
// @Produce json
// @Param telegram_id query string true "Telegram ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞"
// @Success 200 {array} response.TaskResponse "–°–ø–∏—Å–æ–∫ –≤—ã–¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á"
// @Failure 400 {object} response.ErrorResponse "telegram_id is required"
// @Failure 401 {object} response.ErrorResponse "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
// @Failure 403 {object} response.ErrorResponse "–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è"
// @Failure 500 {object} response.ErrorResponse "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á"
// @Router /tasks/issued [get]
func IssuedTaskHandler(c *gin.Context) {
	telegramID := c.Query("telegram_id")
	if telegramID == "" {
		c.JSON(http.StatusBadRequest, gin.H{"error": "telegram_id is required", "code": "NOT_TG_ID"})
		return
	}

	var user models.User
	if err := storage.DB.Where("telegram_id = ?", telegramID).First(&user).Error; err != nil {
		c.JSON(http.StatusUnauthorized, gin.H{"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"})
		return
	}

	if user.Role != "manager" {
		c.JSON(http.StatusForbidden, gin.H{"error": "–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è"})
		return
	}

	var tasks []models.Task
	if err := storage.DB.Where("created_by = ?", user.ID).Find(&tasks).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á"})
		return
	}

	// –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è Telegram
	// var notificationText string
	// if len(tasks) == 0 {
	// 	notificationText = "‚ÑπÔ∏è *–ù–µ—Ç –≤—ã–¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á*"
	// } else {
	// 	notificationText = "üìã *–°–ø–∏—Å–æ–∫ –≤—ã–¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á:*\n\n"
	// 	for i, task := range tasks {
	// 		notificationText += fmt.Sprintf(
	// 			"%d. *%s*\n‚ñ´Ô∏è –û–ø–∏—Å–∞–Ω–∏–µ: _%s_\n‚ñ´Ô∏è –î–µ–¥–ª–∞–π–Ω: %s\n‚ñ´Ô∏è –°—Ç–∞—Ç—É—Å: %s\n\n",
	// 			i+1,
	// 			task.Title,
	// 			task.Description,
	// 			notification.FormatDeadline(task.Deadline),
	// 			task.Status,
	// 		)
	// 	}
	// }

	// // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
	// if user.TelegramID != "" {
	// 	go func() {
	// 		if err := notification.SendTelegramNotification(user.TelegramID, notificationText); err != nil {
	// 			fmt.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: %v\n", err)
	// 		}
	// 	}()
	// }

	// –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ API
	var responseTasks []response.TaskResponse
	for _, task := range tasks {
		responseTasks = append(responseTasks, response.TaskResponse{
			ID:          task.ID,
			Title:       task.Title,
			Description: task.Description,
			Deadline:    task.Deadline,
			Status:      task.Status,
			IsTeam:      task.IsTeam,
			AssignedTo:  task.AssignedTo,
			CreatedBy:   task.CreatedBy,
			TeamID:      task.TeamID,
		})
	}

	c.JSON(http.StatusOK, responseTasks)
}
