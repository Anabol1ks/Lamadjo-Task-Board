package tasks

import (
	"fmt"
	"net/http"
	"time"

	"github.com/Anabol1ks/Lamadjo-Task-Board/internal/models"
	"github.com/Anabol1ks/Lamadjo-Task-Board/internal/notification"
	"github.com/Anabol1ks/Lamadjo-Task-Board/internal/storage"
	"github.com/gin-gonic/gin"
)

type TaskInput struct {
	Title       string    `json:"title" binding:"required"`
	Description string    `json:"description" binding:"required"`
	Deadline    time.Time `json:"deadline" binding:"required"` //RFC 3339
	IsTeam      bool      `json:"is_team"`
	AssignedTo  *string   `json:"assigned_to"`
}

// CreateTaskHandlres —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
// @Summary –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
// @Description –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ
// @Tags tasks
// @Accept json
// @Produce json
// @Param telegram_id query string true "Telegram ID —É–ø—Ä–∞–≤–ª—è—é—â–µ–≥–ær"
// @Param task body TaskInput true "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞–¥–∞—á–∏"
// @Success 200 {object} response.SuccessResponse "–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞"
// @Failure 400 {object} response.ErrorResponse "telegram_id is required"
// @Failure 400 {object} response.ErrorResponse "–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã"
// @Failure 400 {object} response.ErrorResponse "assigned_to –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á"
// @Failure 401 {object} response.ErrorResponse "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
// @Failure 403 {object} response.ErrorResponse "–¢–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –≤—Å—Ç—Ä–µ—á–∏"
// @Failure 500 {object} response.ErrorResponse "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏"
// @Router /tasks [post]
func CreateTaskHandlres(c *gin.Context) {
	telegramID := c.Query("telegram_id")
	if telegramID == "" {
		c.JSON(http.StatusBadRequest, gin.H{"error": "telegram_id is required"})
		return
	}

	var user models.User
	if err := storage.DB.Where("telegram_id = ?", telegramID).First(&user).Error; err != nil {
		c.JSON(http.StatusUnauthorized, gin.H{"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"})
		return
	}
	if user.Role != "manager" {
		c.JSON(http.StatusForbidden, gin.H{"error": "–¢–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –≤—Å—Ç—Ä–µ—á–∏"})
		return
	}
	if user.TeamID == nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã"})
		return
	}

	var input TaskInput
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	if !input.IsTeam && input.AssignedTo == nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "assigned_to –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á"})
		return
	}

	var task = models.Task{
		Title:       input.Title,
		Description: input.Description,
		Deadline:    input.Deadline,
		IsTeam:      input.IsTeam,
		AssignedTo:  input.AssignedTo,
		TeamID:      *user.TeamID,
		CreatedBy:   user.ID,
	}

	if err := storage.DB.Create(&task).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏"})
		return
	}

	var notificationText string
	if input.IsTeam {
		notificationText = fmt.Sprintf(
			"üöÄ *–ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–Ω–∞—è –∑–∞–¥–∞—á–∞!*\n\n"+
				"‚ñ´Ô∏è *–ó–∞–≥–æ–ª–æ–≤–æ–∫:* %s\n"+
				"‚ñ´Ô∏è *–û–ø–∏—Å–∞–Ω–∏–µ:* \n_%s_\n"+
				"‚ñ´Ô∏è *–î–µ–¥–ª–∞–π–Ω:* %s\n"+
				"‚ñ´Ô∏è *–¢–∏–ø:* –û–±—â–∞—è –∑–∞–¥–∞—á–∞ –∫–æ–º–∞–Ω–¥—ã\n\n"+
				"üïë –°–æ–∑–¥–∞–Ω–æ: %s",
			(task.Title),
			(task.Description),
			notification.FormatDeadline(task.Deadline),
			time.Now().Format("02.01.2006 15:04"),
		)

		var teamUsers []models.User
		if err := storage.DB.Where("team_id = ?", user.TeamID).Find(&teamUsers).Error; err != nil {
			fmt.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã: %v\n", err)
		}

		for _, u := range teamUsers {
			if u.TelegramID != "" {
				go func(chatID string) {
					if err := notification.SendTelegramNotification(chatID, notificationText); err != nil {
						fmt.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s: %v\n", chatID, err)
					}
				}(u.TelegramID)
			}
		}
	} else {
		notificationText = fmt.Sprintf(
			"üìå *–ù–æ–≤–∞—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞!*\n\n"+
				"‚ñ´Ô∏è *–ó–∞–≥–æ–ª–æ–≤–æ–∫:* %s\n"+
				"‚ñ´Ô∏è *–û–ø–∏—Å–∞–Ω–∏–µ:* \n_%s_\n"+
				"‚ñ´Ô∏è *–î–µ–¥–ª–∞–π–Ω:* %s\n"+
				"‚ñ´Ô∏è *–ù–∞–∑–Ω–∞—á–µ–Ω–∞:* –í–∞–º –ª–∏—á–Ω–æ\n\n"+
				"üïë –°–æ–∑–¥–∞–Ω–æ: %s",
			task.Title,
			task.Description,
			notification.FormatDeadline(task.Deadline),
			time.Now().Format("02.01.2006 15:04"),
		)

		var assignedUser models.User
		if err := storage.DB.Where("telegram_id = ?", input.AssignedTo).First(&assignedUser).Error; err != nil {
			fmt.Printf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: %v\n", err)
			return
		}

		if assignedUser.TelegramID != "" {
			if err := notification.SendTelegramNotification(assignedUser.TelegramID, notificationText); err != nil {
				fmt.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s: %v\n", assignedUser.TelegramID, err)
			}
		}
	}

	c.JSON(http.StatusOK, gin.H{"message": "–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞"})
}
