package meetings

import (
	"fmt"
	"net/http"
	"time"

	"github.com/Anabol1ks/Lamadjo-Task-Board/internal/models"
	"github.com/Anabol1ks/Lamadjo-Task-Board/internal/notification"
	"github.com/Anabol1ks/Lamadjo-Task-Board/internal/response"
	"github.com/Anabol1ks/Lamadjo-Task-Board/internal/storage"
	"github.com/gin-gonic/gin"
)

// TimeSlot –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª.
type TimeSlot struct {
	Start string `json:"start"` // –ù–∞–ø—Ä–∏–º–µ—Ä, "12:00"
	End   string `json:"end"`   // –ù–∞–ø—Ä–∏–º–µ—Ä, "13:20"
}

// FixedTimeSlots ‚Äì —Å–ø–∏—Å–æ–∫ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –±–ª–æ–∫–æ–≤ –¥–ª—è –æ—Ñ–ª–∞–π–Ω –≤—Å—Ç—Ä–µ—á.
var FixedTimeSlots = []TimeSlot{
	{"12:00", "13:20"},
	{"13:30", "14:50"},
	{"15:00", "16:20"},
	{"16:30", "17:50"},
}

type CreateMeetingInput struct {
	Title       string `json:"title" binding:"required"`
	MeetingType string `json:"meeting_type" binding:"required"` // "online" –∏–ª–∏ "offline"
	Date        string `json:"date" binding:"required"`         // –§–æ—Ä–º–∞—Ç "YYYY-MM-DD"
	StartTime   string `json:"start_time" binding:"required"`   // –§–æ—Ä–º–∞—Ç "HH:MM"
	EndTime     string `json:"end_time" binding:"required"`     // –§–æ—Ä–º–∞—Ç "HH:MM"
	Room        string `json:"room"`                            // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –¥–ª—è –æ—Ñ–ª–∞–π–Ω –≤—Å—Ç—Ä–µ—á
}

// CreateMeetingHandler —Å–æ–∑–¥–∞—ë—Ç –≤—Å—Ç—Ä–µ—á—É
// @Summary –°–æ–∑–¥–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏
// @Description –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –≤—Å—Ç—Ä–µ—á—É –¥–ª—è –∫–æ–º–∞–Ω–¥—ã. –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤.
// @Tags meetings
// @Accept json
// @Produce json
// @Param telegram_id query string true "–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä Telegram"
// @Param input body CreateMeetingInput true "–î–∞–Ω–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏"
// @Success 200 {object} response.MeetingResponse "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –≤—Å—Ç—Ä–µ—á–µ"
// @Failure 400 {object} response.ErrorResponse "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"
// @Failure 401 {object} response.ErrorResponse "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
// @Failure 403 {object} response.ErrorResponse "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω (–Ω–µ –º–µ–Ω–µ–¥–∂–µ—Ä)"
// @Failure 409 {object} response.ErrorResponse "–ö–æ–Ω—Ñ–ª–∏–∫—Ç –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –∞—É–¥–∏—Ç–æ—Ä–∏–∏"
// @Failure 500 {object} response.ErrorResponse "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"
// @Router /meetings [post]
func CreateMeetingHandler(c *gin.Context) {
	telegramID := c.Query("telegram_id")
	if telegramID == "" {
		c.JSON(http.StatusBadRequest, gin.H{"error": "telegram_id is required"})
		return
	}

	// –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ TelegramID
	var user models.User
	if err := storage.DB.Where("telegram_id = ?", telegramID).First(&user).Error; err != nil {
		c.JSON(http.StatusUnauthorized, gin.H{"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"})
		return
	}
	if user.Role != "manager" {
		c.JSON(http.StatusForbidden, gin.H{"error": "–¢–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –≤—Å—Ç—Ä–µ—á–∏"})
		return
	}
	if user.TeamID == nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã"})
		return
	}

	var input CreateMeetingInput
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
	parsedDate, err := time.Parse("2006-01-02", input.Date)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã (YYYY-MM-DD)"})
		return
	}
	parsedStart, err := time.Parse("15:04", input.StartTime)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ (HH:MM)"})
		return
	}
	parsedEnd, err := time.Parse("15:04", input.EndTime)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ (HH:MM)"})
		return
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
	startDateTime := time.Date(parsedDate.Year(), parsedDate.Month(), parsedDate.Day(),
		parsedStart.Hour(), parsedStart.Minute(), 0, 0, time.Local)
	endDateTime := time.Date(parsedDate.Year(), parsedDate.Month(), parsedDate.Day(),
		parsedEnd.Hour(), parsedEnd.Minute(), 0, 0, time.Local)
	if endDateTime.Before(startDateTime) {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞"})
		return
	}

	// –ï—Å–ª–∏ –≤—Å—Ç—Ä–µ—á–∞ –æ—Ñ–ª–∞–π–Ω ‚Äì –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–ª–æ—Ç–∞–º –∏ —á—Ç–æ –∞—É–¥–∏—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	if input.MeetingType == "offline" {
		if input.Room == "" {
			c.JSON(http.StatusBadRequest, gin.H{"error": "–î–ª—è –æ—Ñ–ª–∞–π–Ω –≤—Å—Ç—Ä–µ—á–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∞—É–¥–∏—Ç–æ—Ä–∏—é (room)"})
			return
		}
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∫–∞–∑–∞–Ω–Ω–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è –≤ –ë–î
		var room models.Room
		if err := storage.DB.Where("name = ?", input.Room).First(&room).Error; err != nil {
			c.JSON(http.StatusBadRequest, gin.H{"error": "–ê—É–¥–∏—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"})
			return
		}
		// –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –æ–¥–Ω–æ–º—É –∏–∑ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
		slotMatched := false
		for _, slot := range FixedTimeSlots {
			slotStart, err := time.Parse("15:04", slot.Start)
			if err != nil {
				continue
			}
			slotEnd, err := time.Parse("15:04", slot.End)
			if err != nil {
				continue
			}
			tsStart := time.Date(parsedDate.Year(), parsedDate.Month(), parsedDate.Day(),
				slotStart.Hour(), slotStart.Minute(), 0, 0, time.Local)
			tsEnd := time.Date(parsedDate.Year(), parsedDate.Month(), parsedDate.Day(),
				slotEnd.Hour(), slotEnd.Minute(), 0, 0, time.Local)
			if startDateTime.Equal(tsStart) && endDateTime.Equal(tsEnd) {
				slotMatched = true
				break
			}
		}
		if !slotMatched {
			c.JSON(http.StatusBadRequest, gin.H{"error": "–í—Ä–µ–º—è –≤—Å—Ç—Ä–µ—á–∏ –¥–æ–ª–∂–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –æ–¥–Ω–æ–º—É –∏–∑ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –±–ª–æ–∫–æ–≤"})
			return
		}

		// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤: –∏—â–µ–º –≤—Å—Ç—Ä–µ—á–∏ –≤ —Ç–æ–π –∂–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏, –≤ —Ç—É –∂–µ –¥–∞—Ç—É –∏ —Å –ø–µ—Ä–µ—Å–µ–∫–∞—é—â–∏–º—Å—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º.
		var existingMeetings []models.Meeting
		if err := storage.DB.Where("team_id = ? AND meeting_type = ? AND date = ? AND room = ? AND ((start_time < ? AND end_time > ?))",
			*user.TeamID, "offline", parsedDate, input.Room, endDateTime, startDateTime).Find(&existingMeetings).Error; err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤"})
			return
		}
		if len(existingMeetings) > 0 {
			c.JSON(http.StatusConflict, gin.H{"error": "–ö–æ–Ω—Ñ–ª–∏–∫—Ç –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –∞—É–¥–∏—Ç–æ—Ä–∏–∏"})
			return
		}
	}

	// –î–ª—è –æ–Ω–ª–∞–π–Ω –≤—Å—Ç—Ä–µ—á –º–æ–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É (–ø—Ä–∏–º–µ—Ä)
	var confLink string
	if input.MeetingType == "online" {
		confLink = "https://zoom.us/j/–¢–ò–ü–û_–°–°–´–õ–ö–ê_–ù–ê_–ó–£–ú"
	}

	meeting := models.Meeting{
		Title:          input.Title,
		MeetingType:    input.MeetingType,
		Date:           parsedDate,
		StartTime:      startDateTime,
		EndTime:        endDateTime,
		ConferenceLink: confLink,
		Room:           input.Room,
		TeamID:         *user.TeamID,
		CreatedBy:      user.ID,
	}

	if err := storage.DB.Create(&meeting).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤—Å—Ç—Ä–µ—á–∏"})
		return
	}

	response := response.MeetingResponse{
		ID:             meeting.ID,
		Title:          meeting.Title,
		MeetingType:    meeting.MeetingType,
		Date:           meeting.Date,
		StartTime:      meeting.StartTime,
		EndTime:        meeting.EndTime,
		ConferenceLink: meeting.ConferenceLink,
		Room:           meeting.Room,
		TeamID:         meeting.TeamID,
		CreatedBy:      meeting.CreatedBy,
		CreatedAt:      meeting.CreatedAt,
		UpdatedAt:      meeting.UpdatedAt,
	}

	var notificationText string
	if meeting.MeetingType == "online" {
		notificationText = fmt.Sprintf(
			"üì¢ *–ù–æ–≤–∞—è –≤—Å—Ç—Ä–µ—á–∞!*\n\n"+
				"*–ù–∞–∑–≤–∞–Ω–∏–µ:* %s\n"+
				"*–î–∞—Ç–∞:* %s\n"+
				"*–í—Ä–µ–º—è:* %s - %s\n"+
				"*–¢–∏–ø:* –û–Ω–ª–∞–π–Ω\n"+
				"*–°—Å—ã–ª–∫–∞:* [–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è](%s)",
			meeting.Title,
			formatDateRussian(meeting.Date),
			meeting.StartTime.Format("15:04"),
			meeting.EndTime.Format("15:04"),
			meeting.ConferenceLink,
		)
	} else {
		notificationText = fmt.Sprintf(
			"üì¢ *–ù–æ–≤–∞—è –≤—Å—Ç—Ä–µ—á–∞!*\n\n"+
				"*–ù–∞–∑–≤–∞–Ω–∏–µ:* %s\n"+
				"*–î–∞—Ç–∞:* %s\n"+
				"*–í—Ä–µ–º—è:* %s - %s\n"+
				"*–¢–∏–ø:* –û—Ñ–ª–∞–π–Ω\n"+
				"*–ê—É–¥–∏—Ç–æ—Ä–∏—è:* %s",
			meeting.Title,
			formatDateRussian(meeting.Date),
			meeting.StartTime.Format("15:04"),
			meeting.EndTime.Format("15:04"),
			meeting.Room,
		)
	}

	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –≤ –º–æ–¥–µ–ª–∏ User –µ—Å—Ç—å –ø–æ–ª–µ TelegramID –∏ TeamID)
	var teamUsers []models.User
	if err := storage.DB.Where("team_id = ?", meeting.TeamID).Find(&teamUsers).Error; err != nil {
		// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏, –Ω–æ –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ç–æ–º—É, –∫–æ–≥–æ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏
		fmt.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã: %v\n", err)
	}

	for _, u := range teamUsers {
		if u.TelegramID != "" {
			go func(chatID string) {
				if err := notification.SendTelegramNotification(chatID, notificationText); err != nil {
					fmt.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s: %v\n", chatID, err)
				}
			}(u.TelegramID)
		}
	}

	c.JSON(http.StatusOK, response)
}

// GetAvailableTimeSlotsHandler –ø–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã
// @Summary –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
// @Description –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
// @Tags meetings
// @Accept json
// @Produce json
// @Param room query string true "–ù–æ–º–µ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏"
// @Param date query string true "–î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD"
// @Success 200 {array} []TimeSlot "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤"
// @Failure 400 {object} response.ErrorResponse "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç"
// @Failure 500 {object} response.ErrorResponse "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö"
// @Router /meetings/available-slots [get]
func GetAvailableTimeSlotsHandler(c *gin.Context) {
	roomName := c.Query("room")
	dateStr := c.Query("date")
	if roomName == "" || dateStr == "" {
		c.JSON(http.StatusBadRequest, gin.H{"error": "room –∏ date –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"})
		return
	}
	parsedDate, err := time.Parse("2006-01-02", dateStr)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã (YYYY-MM-DD)"})
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∞—É–¥–∏—Ç–æ—Ä–∏—è
	var room models.Room
	if err := storage.DB.Where("name = ?", roomName).First(&room).Error; err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ê—É–¥–∏—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"})
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤—Å—Ç—Ä–µ—á–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –∏ –¥–∞—Ç—ã.
	var meetings []models.Meeting
	if err := storage.DB.Where("room = ? AND date = ?", roomName, parsedDate).Find(&meetings).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ë–î"})
		return
	}

	// –°–æ–±–∏—Ä–∞–µ–º –∑–∞–Ω—è—Ç—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã.
	occupiedSlots := []struct {
		Start time.Time
		End   time.Time
	}{}
	for _, m := range meetings {
		occupiedSlots = append(occupiedSlots, struct {
			Start time.Time
			End   time.Time
		}{Start: m.StartTime, End: m.EndTime})
	}

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã.
	availableSlots := []TimeSlot{}
	for _, slot := range FixedTimeSlots {
		slotStartParsed, err := time.Parse("15:04", slot.Start)
		if err != nil {
			continue
		}
		slotEndParsed, err := time.Parse("15:04", slot.End)
		if err != nil {
			continue
		}
		slotStart := time.Date(parsedDate.Year(), parsedDate.Month(), parsedDate.Day(),
			slotStartParsed.Hour(), slotStartParsed.Minute(), 0, 0, time.Local)
		slotEnd := time.Date(parsedDate.Year(), parsedDate.Month(), parsedDate.Day(),
			slotEndParsed.Hour(), slotEndParsed.Minute(), 0, 0, time.Local)

		conflict := false
		for _, occ := range occupiedSlots {
			if slotStart.Before(occ.End) && slotEnd.After(occ.Start) {
				conflict = true
				break
			}
		}
		if !conflict {
			availableSlots = append(availableSlots, slot)
		}
	}

	c.JSON(http.StatusOK, gin.H{"available_slots": availableSlots})
}

// DeleteMeetingHandler —É–¥–∞–ª—è–µ—Ç –≤—Å—Ç—Ä–µ—á—É
// @Summary –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏
// @Description –£–¥–∞–ª—è–µ—Ç –≤—Å—Ç—Ä–µ—á—É –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã. –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤.
// @Tags meetings
// @Accept json
// @Produce json
// @Param telegram_id query string true "–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä Telegram"
// @Param id path string true "ID –≤—Å—Ç—Ä–µ—á–∏"
// @Success 200 {object} response.SuccessResponse "–í—Å—Ç—Ä–µ—á–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞"
// @Failure 400 {object} response.ErrorResponse "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç telegram_id –∏–ª–∏ ID –≤—Å—Ç—Ä–µ—á–∏"
// @Failure 401 {object} response.ErrorResponse "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
// @Failure 403 {object} response.ErrorResponse "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω (–Ω–µ –º–µ–Ω–µ–¥–∂–µ—Ä)"
// @Failure 404 {object} response.ErrorResponse "–í—Å—Ç—Ä–µ—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
// @Failure 500 {object} response.ErrorResponse "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Å—Ç—Ä–µ—á–∏"
// @Router /meetings/{id} [delete]
func DeleteMeetingHandler(c *gin.Context) {
	telegramID := c.Query("telegram_id")
	if telegramID == "" {
		c.JSON(http.StatusBadRequest, gin.H{"error": "telegram_id is required"})
		return
	}

	meetingID := c.Param("id")
	if meetingID == "" {
		c.JSON(http.StatusBadRequest, gin.H{"error": "ID –≤—Å—Ç—Ä–µ—á–∏ –Ω–µ —É–∫–∞–∑–∞–Ω"})
		return
	}

	var user models.User
	if err := storage.DB.Where("telegram_id = ?", telegramID).First(&user).Error; err != nil {
		c.JSON(http.StatusUnauthorized, gin.H{"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"})
		return
	}

	if user.Role != "manager" {
		c.JSON(http.StatusForbidden, gin.H{"error": "–¢–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –≤—Å—Ç—Ä–µ—á–∏"})
		return
	}

	var meeting models.Meeting
	if err := storage.DB.First(&meeting, meetingID).Error; err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "–í—Å—Ç—Ä–µ—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"})
		return
	}

	if user.TeamID == nil || *user.TeamID != meeting.TeamID {
		c.JSON(http.StatusForbidden, gin.H{"error": "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω–æ–π –≤—Å—Ç—Ä–µ—á–µ"})
		return
	}

	meetingTitle := meeting.Title

	if err := storage.DB.Delete(&meeting).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Å—Ç—Ä–µ—á–∏"})
		return
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
	notificationText := fmt.Sprintf(
		"‚ùå *–í—Å—Ç—Ä–µ—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!*\n\n"+
			"*–ù–∞–∑–≤–∞–Ω–∏–µ:* %s\n"+
			"*–î–∞—Ç–∞:* %s\n"+
			"*–í—Ä–µ–º—è:* %s - %s",
		meetingTitle,
		formatDateRussian(meeting.Date),
		meeting.StartTime.Format("15:04"),
		meeting.EndTime.Format("15:04"),
	)

	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã
	var teamUsers []models.User
	if err := storage.DB.Where("team_id = ?", meeting.TeamID).Find(&teamUsers).Error; err != nil {
		fmt.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã: %v\n", err)
	}

	for _, u := range teamUsers {
		if u.TelegramID != "" {
			go func(chatID string) {
				if err := notification.SendTelegramNotification(chatID, notificationText); err != nil {
					fmt.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s: %v\n", chatID, err)
				}
			}(u.TelegramID)
		}
	}

	c.JSON(http.StatusOK, gin.H{"message": "–í—Å—Ç—Ä–µ—á–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞"})
}

// GetMyMeeting –ø–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å—Ç—Ä–µ—á –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// @Summary –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å—Ç—Ä–µ—á –∫–æ–º–∞–Ω–¥—ã
// @Description –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤—Å—Ç—Ä–µ—á –∫–æ–º–∞–Ω–¥—ã, –∫ –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–∏–≤—è–∑–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
// @Tags meetings
// @Accept json
// @Produce json
// @Param telegram_id query string true "–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä Telegram"
// @Success 200 {array} response.MeetingResponse "–°–ø–∏—Å–æ–∫ –≤—Å—Ç—Ä–µ—á –∫–æ–º–∞–Ω–¥—ã"
// @Failure 400 {object} response.ErrorResponse "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç telegram_id –∏–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∫–æ–º–∞–Ω–¥—ã"
// @Failure 401 {object} response.ErrorResponse "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
// @Failure 500 {object} response.ErrorResponse "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å—Ç—Ä–µ—á"
// @Router /meetings/my [get]
func GetMyMeeting(c *gin.Context) {
	telegramID := c.Query("telegram_id")
	if telegramID == "" {
		c.JSON(http.StatusBadRequest, gin.H{"error": "telegram_id is required"})
		return
	}
	var user models.User
	if err := storage.DB.Where("telegram_id = ?", telegramID).First(&user).Error; err != nil {
		c.JSON(http.StatusUnauthorized, gin.H{"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"})
		return
	}

	if user.TeamID == nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã"})
		return
	}

	var meetings []models.Meeting
	if err := storage.DB.Where("team_id = ?", *user.TeamID).Find(&meetings).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å—Ç—Ä–µ—á"})
		return
	}

	c.JSON(http.StatusOK, meetings)
}

func formatDateRussian(t time.Time) string {
	months := []string{
		"—è–Ω–≤–∞—Ä—è", "—Ñ–µ–≤—Ä–∞–ª—è", "–º–∞—Ä—Ç–∞", "–∞–ø—Ä–µ–ª—è", "–º–∞—è", "–∏—é–Ω—è",
		"–∏—é–ª—è", "–∞–≤–≥—É—Å—Ç–∞", "—Å–µ–Ω—Ç—è–±—Ä—è", "–æ–∫—Ç—è–±—Ä—è", "–Ω–æ—è–±—Ä—è", "–¥–µ–∫–∞–±—Ä—è",
	}
	day := t.Day()
	month := months[t.Month()-1] // t.Month() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 1 –¥–æ 12
	year := t.Year()
	return fmt.Sprintf("%d %s %d", day, month, year)
}
