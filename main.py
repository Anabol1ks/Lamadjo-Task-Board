import requests
import time
import json
from dotenv import load_dotenv
import os
from typing import Dict, Any
from dataclasses import dataclass
from datetime import datetime, timezone

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")
TELEGRAM_URL = f"https://api.telegram.org/bot{TOKEN}/"
BACKEND_BASE_URL = 'https://75ad6g-213-87-86-236.ru.tuna.am'

# –î–æ–±–∞–≤–∏–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞—É–¥–∏—Ç–æ—Ä–∏–π –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
AVAILABLE_ROOMS = ["A-1", "A-2", "A-3", "A-4", "A-5"]
FIXED_TIME_SLOTS = [
    {"start": "12:00", "end": "13:20"},
    {"start": "13:30", "end": "14:50"},
    {"start": "15:00", "end": "16:20"},
    {"start": "16:30", "end": "17:50"}
]

@dataclass
class UserState:
    state: str
    data: Dict[str, Any]
    last_command: str = ""
    role: str = ""
    name: str = ""
    team_id: int = None
    team_name: str = ""

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
user_states: Dict[int, UserState] = {}
welcomed_users = set()

def get_updates(offset=None):
    url = TELEGRAM_URL + "getUpdates"
    params = {
        "timeout": 100,
        "offset": offset
    }
    response = requests.get(url, params=params)
    return response.json()

def send_message(chat_id, text, reply_markup=None, parse_mode="Markdown"):
    url = TELEGRAM_URL + "sendMessage"
    payload = {
        "chat_id": chat_id,
        "text": text,
        "parse_mode": parse_mode
    }
    if reply_markup:
        payload["reply_markup"] = reply_markup
    try:
        response = requests.post(url, json=payload)
        if response.status_code != 200:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {response.text}")
    except Exception as e:
        print(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

def answer_callback(callback_query_id):
    url = TELEGRAM_URL + "answerCallbackQuery"
    payload = {"callback_query_id": callback_query_id}
    requests.post(url, json=payload)

def delete_message(chat_id, message_id):
    url = TELEGRAM_URL + "deleteMessage"
    payload = {"chat_id": chat_id, "message_id": message_id}
    requests.post(url, json=payload)

def auth_get_request(chat_id):
    url = f"{BACKEND_BASE_URL}/auth"
    params = {"telegram_id": str(chat_id)}
    headers = {
        "User-Agent": "TelegramBot/1.0",
        "Accept": "application/json",
    }
    try:
        response = requests.get(url, params=params, headers=headers)
        print(f"Auth response status: {response.status_code}")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
        print(f"Auth response body: {response.text}")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
        
        if response.status_code == 200:
            return {"success": True, "data": response.json()}
        elif response.status_code == 401:
            return {"success": False, "error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}
        else:
            return {"success": False, "error": f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {response.status_code}"}
    except Exception as e:
        print(f"Auth request exception: {str(e)}")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
        return {"success": False, "error": str(e)}

def auth_post_request(chat_id, name, role):
    url = f"{BACKEND_BASE_URL}/auth"
    payload = {"telegram_id": str(chat_id), "name": name, "role": role}
    headers = {
        "User-Agent": "TelegramBot/1.0",
        "Accept": "application/json",
        "Content-Type": "application/json",
    }
    try:
        print(f"Auth post payload: {payload}")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
        response = requests.post(url, json=payload, headers=headers)
        print(f"Auth post response status: {response.status_code}")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
        print(f"Auth post response body: {response.text}")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
        
        if response.status_code == 200:
            return {"success": True, "data": response.json()}
        else:
            error_msg = response.json().get("error", f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
            return {"success": False, "error": error_msg}
    except Exception as e:
        print(f"Auth post request exception: {str(e)}")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
        return {"success": False, "error": str(e)}

def send_welcome(chat_id):
    keyboard = {
        "inline_keyboard": [
            [{"text": "–ù–∞—á–∞—Ç—å", "callback_data": "start"}]
        ]
    }
    send_message(chat_id, "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ –∏ –≤—Å—Ç—Ä–µ—á–∞–º–∏ –∫–æ–º–∞–Ω–¥—ã!\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ù–∞—á–∞—Ç—å' –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–ª–∏ –≤—Ö–æ–¥–∞.", reply_markup=keyboard)

def send_role_selection(chat_id, name):
    keyboard = {
        "inline_keyboard": [
            [
                {"text": "üë®‚Äçüíº –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å", "callback_data": "role_manager"},
                {"text": "üë• –£—á–∞—Å—Ç–Ω–∏–∫", "callback_data": "role_member"}
            ]
        ]
    }
    send_message(chat_id, f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {name}! –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:", reply_markup=keyboard)

def send_main_menu(chat_id, user_state: UserState):
    keyboard_buttons = []
    
    if user_state.role == "manager":
        if user_state.team_id:
            # –ú–µ–Ω–µ–¥–∂–µ—Ä —Å –∫–æ–º–∞–Ω–¥–æ–π
            keyboard_buttons.extend([
                [{"text": "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π", "callback_data": "manage_team"}],
                [{"text": "üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏", "callback_data": "manage_tasks"}],
                [{"text": "üìÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∞–º–∏", "callback_data": "manage_meetings"}]
            ])
        else:
            # –ú–µ–Ω–µ–¥–∂–µ—Ä –±–µ–∑ –∫–æ–º–∞–Ω–¥—ã
            keyboard_buttons.append([{"text": "üìù –°–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É", "callback_data": "create_team"}])
    else:
        # –£—á–∞—Å—Ç–Ω–∏–∫
        if user_state.team_id:
            # –£—á–∞—Å—Ç–Ω–∏–∫ —Å –∫–æ–º–∞–Ω–¥–æ–π
            keyboard_buttons.extend([
                [{"text": "üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏", "callback_data": "my_tasks"}],
                [{"text": "üìÖ –ú–æ–∏ –≤—Å—Ç—Ä–µ—á–∏", "callback_data": "my_meetings"}]
            ])
        else:
            # –£—á–∞—Å—Ç–Ω–∏–∫ –±–µ–∑ –∫–æ–º–∞–Ω–¥—ã
            keyboard_buttons.append([{"text": "ü§ù –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–∞–Ω–¥–µ", "callback_data": "join_team"}])
    
    keyboard_buttons.append([{"text": "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", "callback_data": "my_profile"}])
    
    keyboard = {
        "inline_keyboard": keyboard_buttons
    }
    
    message = f"üè† *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n"
    if user_state.team_name:
        message += f"\n–í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞: *{user_state.team_name}*"
    elif user_state.role == "manager":
        message += "\n\n_–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é –∫–æ–º–∞–Ω–¥—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É_"
    elif user_state.role == "member":
        message += "\n\n_–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ –∫–æ–º–∞–Ω–¥–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É_"
    
    print(f"User state: {user_state}")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
    print(f"Sending menu with buttons: {keyboard_buttons}")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
    
    send_message(chat_id, message, reply_markup=keyboard)

def send_profile_menu(chat_id, user_state: UserState):
    message = (
        f"*üë§ –ü—Ä–æ—Ñ–∏–ª—å*\n\n"
        f"*–ò–º—è:* {user_state.name}\n"
        f"*–†–æ–ª—å:* {'–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å' if user_state.role == 'manager' else '–£—á–∞—Å—Ç–Ω–∏–∫'}\n"
    )
    
    if user_state.team_name:
        message += f"*–ö–æ–º–∞–Ω–¥–∞:* {user_state.team_name}\n"
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤—ã—Ö–æ–¥–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã —Ç–æ–ª—å–∫–æ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        if user_state.role == "member":
            keyboard = {
                "inline_keyboard": [
                    [{"text": "üö™ –ü–æ–∫–∏–Ω—É—Ç—å –∫–æ–º–∞–Ω–¥—É", "callback_data": "leave_team"}],
                    [{"text": "üîô –ù–∞–∑–∞–¥", "callback_data": "back_to_main"}]
                ]
            }
        else:
            keyboard = {
                "inline_keyboard": [
                    [{"text": "üîô –ù–∞–∑–∞–¥", "callback_data": "back_to_main"}]
                ]
            }
    else:
        message += "_–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã_\n"
        keyboard = {
            "inline_keyboard": [
                [{"text": "üîô –ù–∞–∑–∞–¥", "callback_data": "back_to_main"}]
            ]
        }
    
    send_message(chat_id, message, reply_markup=keyboard)

def process_start_command(chat_id, command_args=None):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    if command_args:
        invite_code = command_args
        auth_result = auth_get_request(chat_id)
        
        if auth_result["success"]:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
            user_data = auth_result["data"]
            user_state = UserState(
                state="authorized",
                data={},
                role=user_data.get("Role", ""),
                name=user_data.get("Name", ""),
                team_id=user_data.get("TeamID")
            )
            user_states[chat_id] = user_state
            
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –∫–æ–º–∞–Ω–¥–µ
            if user_state.team_id:
                send_message(chat_id, "‚ùå –í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–æ–º–∞–Ω–¥–µ")
                send_main_menu(chat_id, user_state)
                return
            
            # –ü—Ä–æ–±—É–µ–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å –∫ –∫–æ–º–∞–Ω–¥–µ
            result = team_join_request(chat_id, invite_code)
            if result["success"]:
                send_message(chat_id, "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–∞–Ω–¥–µ!")
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–µ
                team_info = team_get_my_request(chat_id)
                if team_info["success"]:
                    user_state.team_name = team_info["data"].get("Name", "")
                    user_state.team_id = team_info["data"].get("ID")
                send_main_menu(chat_id, user_state)
            else:
                send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")
                send_main_menu(chat_id, user_state)
        else:
            # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
            user_state = UserState(state="awaiting_name", data={"invite_code": invite_code})
            user_states[chat_id] = user_state
            send_message(chat_id, "üëã –î–∞–≤–∞–π—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è! –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")
        return

    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ /start –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    auth_result = auth_get_request(chat_id)
    print(f"Auth result: {auth_result}")
    
    if auth_result["success"]:
        user_data = auth_result["data"]
        print(f"User data: {user_data}")
        
        user_state = UserState(
            state="authorized",
            data={},
            role=user_data.get("Role", ""),
            name=user_data.get("Name", ""),
            team_id=user_data.get("TeamID")
        )
        
        if user_state.team_id:
            team_result = team_get_my_request(chat_id)
            if team_result["success"]:
                user_state.team_name = team_result["data"].get("Name", "")
        
        user_states[chat_id] = user_state
        send_main_menu(chat_id, user_states[chat_id])
    else:
        user_states[chat_id] = UserState(state="awaiting_name", data={})
        send_message(chat_id, "üëã –î–∞–≤–∞–π—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è! –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")

def process_callback(callback):
    callback_id = callback["id"]
    chat_id = callback["message"]["chat"]["id"]
    message_id = callback["message"]["message_id"]
    data = callback.get("data")
    
    answer_callback(callback_id)
    delete_message(chat_id, message_id)
    
    user_state = user_states.get(chat_id)
    if not user_state:
        user_state = UserState(state="initial", data={})
        user_states[chat_id] = user_state

    if data == "start":
        process_start_command(chat_id)
        return

    if data.startswith("role_"):
        if user_state.state == "awaiting_role":
            role = data.split("_")[1]
            name = user_state.data.get("name")
            
            result = auth_post_request(chat_id, name, role)
            if result["success"]:
                user_state.role = role
                user_state.name = name
                user_state.state = "authorized"
                send_message(chat_id, "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
                invite_code = user_state.data.get("invite_code")
                if invite_code:
                    result = team_join_request(chat_id, invite_code)
                    if result["success"]:
                        send_message(chat_id, "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–∞–Ω–¥–µ!")
                        team_info = team_get_my_request(chat_id)
                        if team_info["success"]:
                            user_state.team_name = team_info["data"].get("Name", "")
                            user_state.team_id = team_info["data"].get("ID")
                    else:
                        send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–∞–Ω–¥–µ: {result['error']}")
                
                send_main_menu(chat_id, user_state)
            else:
                send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {result['error']}")
                process_start_command(chat_id)
            return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
    if data == "create_team":
        if user_state.role == "manager":
            user_state.state = "awaiting_team_name"
            send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:")
        else:
            send_message(chat_id, "‚ùå –¢–æ–ª—å–∫–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É")
            send_main_menu(chat_id, user_state)
        return

    # –î–æ–±–∞–≤–∏–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã
    if data == "manage_team":
        send_team_management_menu(chat_id)
    elif data == "join_team":
        send_team_join_menu(chat_id)
    elif data == "team_info":
        result = team_get_my_request(chat_id)
        if result["success"]:
            team_data = result["data"]
            message = (
                f"*–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–∞–Ω–¥–µ*\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: *{team_data.get('Name', '–ù/–î')}*\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: _{team_data.get('Description', '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}_"
            )
            keyboard = {
                "inline_keyboard": [[{"text": "üîô –ù–∞–∑–∞–¥", "callback_data": "manage_team"}]]
            }
            send_message(chat_id, message, reply_markup=keyboard)
        else:
            send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")
    elif data == "team_invite":
        result = team_get_invite_request(chat_id)
        if result["success"]:
            invite_link = result["data"].strip('"')  # –£–¥–∞–ª—è–µ–º –∫–∞–≤—ã—á–∫–∏
            message = f"*–°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ –∫–æ–º–∞–Ω–¥—É:*\n`{invite_link}`"
            keyboard = {
                "inline_keyboard": [[{"text": "üîô –ù–∞–∑–∞–¥", "callback_data": "manage_team"}]]
            }
            send_message(chat_id, message, reply_markup=keyboard)
        else:
            send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")
    elif data == "team_members":
        result = team_get_members_request(chat_id)
        if result["success"]:
            members = result["data"]
            message = "*–£—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥—ã:*\n\n"
            keyboard = {"inline_keyboard": []}
            
            for member in members:
                member_name = member.get('Name', '–ù/–î')
                member_id = member.get('TelegramID')
                message += f"üë§ {member_name}\n"
                if user_state.role == "manager" and member_id:
                    keyboard["inline_keyboard"].append([{
                        "text": f"‚ùå –ò—Å–∫–ª—é—á–∏—Ç—å {member_name}",
                        "callback_data": f"kick_member_{member_id}"
                    }])
            
            keyboard["inline_keyboard"].append([{"text": "üîô –ù–∞–∑–∞–¥", "callback_data": "manage_team"}])
            send_message(chat_id, message, reply_markup=keyboard)
        else:
            send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")
    elif data == "enter_invite_code":
        user_state.state = "awaiting_invite_code"
        send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:")
    elif data == "back_to_main":
        send_main_menu(chat_id, user_state)
    elif data.startswith("kick_member_"):
        member_id = data.split("_")[2]
        result = team_kick_member_request(chat_id, member_id)
        if result["success"]:
            send_message(chat_id, "‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ –∫–æ–º–∞–Ω–¥—ã")
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            process_callback({"id": callback_id, "message": callback["message"], "data": "team_members"})
        else:
            send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")
    elif data == "team_delete":
        keyboard = {
            "inline_keyboard": [
                [
                    {"text": "‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", "callback_data": "confirm_team_delete"},
                    {"text": "‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", "callback_data": "manage_team"}
                ]
            ]
        }
        send_message(chat_id, "‚ö†Ô∏è *–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É?*\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.", reply_markup=keyboard)
    elif data == "confirm_team_delete":
        result = team_delete_request(chat_id)
        if result["success"]:
            send_message(chat_id, "‚úÖ –ö–æ–º–∞–Ω–¥–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")
            user_state.team_name = ""
            user_state.team_id = None
            send_main_menu(chat_id, user_state)
        else:
            send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")
            send_team_management_menu(chat_id)
    elif data == "my_profile":
        send_profile_menu(chat_id, user_state)
    elif data == "leave_team":
        if user_state.role == "member":
            keyboard = {
                "inline_keyboard": [
                    [
                        {"text": "‚úÖ –î–∞, –ø–æ–∫–∏–Ω—É—Ç—å", "callback_data": "confirm_leave_team"},
                        {"text": "‚ùå –ù–µ—Ç, –æ—Å—Ç–∞—Ç—å—Å—è", "callback_data": "my_profile"}
                    ]
                ]
            }
            send_message(chat_id, "‚ö†Ô∏è *–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–∫–∏–Ω—É—Ç—å –∫–æ–º–∞–Ω–¥—É?*", reply_markup=keyboard)
        else:
            send_message(chat_id, "‚ùå –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –ø–æ–∫–∏–Ω—É—Ç—å –∫–æ–º–∞–Ω–¥—É")
            send_profile_menu(chat_id, user_state)
    elif data == "confirm_leave_team":
        result = team_leave_request(chat_id)
        if result["success"]:
            send_message(chat_id, "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–∫–∏–Ω—É–ª–∏ –∫–æ–º–∞–Ω–¥—É")
            user_state.team_id = None
            user_state.team_name = ""
            send_main_menu(chat_id, user_state)
        else:
            send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")
            send_profile_menu(chat_id, user_state)
    elif data == "manage_tasks":
        send_task_management_menu(chat_id, user_state)
    elif data == "my_tasks":
        send_my_tasks_menu(chat_id)
    elif data == "issued_tasks":
        send_issued_tasks_menu(chat_id)
    elif data == "create_task":
        user_state.state = "awaiting_task_type"
        keyboard = {
            "inline_keyboard": [
                [
                    {"text": "üë• –ö–æ–º–∞–Ω–¥–Ω–∞—è –∑–∞–¥–∞—á–∞", "callback_data": "create_team_task"},
                    {"text": "üë§ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞", "callback_data": "create_personal_task"}
                ],
                [{"text": "üîô –ù–∞–∑–∞–¥", "callback_data": "manage_tasks"}]
            ]
        }
        send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞—á–∏:", reply_markup=keyboard)
    elif data.startswith("create_team_task") or data.startswith("create_personal_task"):
        user_state.data["task_type"] = "team" if data.startswith("create_team_task") else "personal"
        user_state.state = "awaiting_task_title"
        send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
    elif data.startswith("update_task_status_"):
        task_id = data.split("_")[-1]
        user_state.data["updating_task_id"] = task_id
        keyboard = {
            "inline_keyboard": [
                [
                    {"text": "üîÑ –í —Ä–∞–±–æ—Ç–µ", "callback_data": f"set_status_in_progress_{task_id}"},
                    {"text": "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞", "callback_data": f"set_status_completed_{task_id}"}
                ],
                [{"text": "üîô –ù–∞–∑–∞–¥", "callback_data": "my_tasks"}]
            ]
        }
        send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏:", reply_markup=keyboard)
    elif data.startswith("set_status_"):
        parts = data.split("_")
        status = parts[-2]
        task_id = parts[-1]
        user_state.data["updating_task_id"] = task_id
        user_state.data["new_status"] = status
        user_state.state = "awaiting_completion_text"
        if status == "completed":
            send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –æ—Ç—á–µ—Ç –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' –µ—Å–ª–∏ –æ—Ç—á–µ—Ç –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è):")
        else:
            result = tasks_update_status_request(chat_id, task_id, status)
            if result["success"]:
                send_message(chat_id, "‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω")
                send_my_tasks_menu(chat_id)
            else:
                send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {result['error']}")
    elif data.startswith("delete_task_"):
        task_id = data.split("_")[-1]
        keyboard = {
            "inline_keyboard": [
                [
                    {"text": "‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", "callback_data": f"confirm_delete_task_{task_id}"},
                    {"text": "‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", "callback_data": "issued_tasks"}
                ]
            ]
        }
        send_message(chat_id, "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–¥–∞—á—É?", reply_markup=keyboard)
    elif data.startswith("confirm_delete_task_"):
        task_id = data.split("_")[-1]
        result = tasks_delete_request(chat_id, task_id)
        if result["success"]:
            send_message(chat_id, "‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")
            send_issued_tasks_menu(chat_id)
        else:
            send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {result['error']}")
            send_issued_tasks_menu(chat_id)
    elif data.startswith("assign_task_"):
        assigned_to = data.split("_")[2]
        result = tasks_create_request(
            chat_id,
            user_state.data["task_title"],
            user_state.data["task_description"],
            user_state.data["task_deadline"],
            is_team=False,
            assigned_to=assigned_to
        )
        if result["success"]:
            send_message(chat_id, "‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞")
            send_task_management_menu(chat_id, user_state)
        else:
            send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: {result['error']}")
            send_task_management_menu(chat_id, user_state)
        user_state.state = "authorized"
    elif data == "manage_meetings":
        send_meeting_management_menu(chat_id, user_state)
    elif data == "my_meetings" or data == "list_meetings":
        result = meetings_get_my_request(chat_id)
        if result["success"]:
            meetings = result["data"]
            if not meetings:
                keyboard = {
                    "inline_keyboard": [[{"text": "üîô –ù–∞–∑–∞–¥", "callback_data": "back_to_main"}]]
                }
                send_message(chat_id, "*–ú–æ–∏ –≤—Å—Ç—Ä–µ—á–∏*\n\n_–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á_", reply_markup=keyboard)
                return

            message = "*–ú–æ–∏ –≤—Å—Ç—Ä–µ—á–∏:*\n\n"
            keyboard = {"inline_keyboard": []}

            for meeting in meetings:
                meeting_type = "üåê –û–Ω–ª–∞–π–Ω" if meeting["MeetingType"] == "online" else f"üè¢ –û—Ñ–ª–∞–π–Ω (–ê—É–¥–∏—Ç–æ—Ä–∏—è: {meeting['Room']})"
                start_time = format_meeting_datetime(meeting["StartTime"])
                end_time = format_meeting_datetime(meeting["EndTime"])
                
                message += (
                    f"*{meeting['Title']}*\n"
                    f"–¢–∏–ø: {meeting_type}\n"
                    f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {start_time} - {end_time}\n"
                )
                
                if meeting["ConferenceLink"]:
                    message += f"–°—Å—ã–ª–∫–∞: {meeting['ConferenceLink']}\n"
                
                message += "\n"
                
                if user_state.role == "manager":
                    keyboard["inline_keyboard"].append([{
                        "text": f"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å: {meeting['Title']}",
                        "callback_data": f"delete_meeting_{meeting['ID']}"
                    }])

            keyboard["inline_keyboard"].append([{"text": "üîô –ù–∞–∑–∞–¥", "callback_data": "back_to_main"}])
            send_message(chat_id, message, reply_markup=keyboard)
        else:
            send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")
            send_main_menu(chat_id, user_state)
    elif data == "create_meeting":
        user_state.state = "awaiting_meeting_type"
        keyboard = {
            "inline_keyboard": [
                [
                    {"text": "üåê –û–Ω–ª–∞–π–Ω", "callback_data": "meeting_type_online"},
                    {"text": "üè¢ –û—Ñ–ª–∞–π–Ω", "callback_data": "meeting_type_offline"}
                ],
                [{"text": "üîô –û—Ç–º–µ–Ω–∞", "callback_data": "manage_meetings"}]
            ]
        }
        send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤—Å—Ç—Ä–µ—á–∏:", reply_markup=keyboard)
    elif data.startswith("meeting_type_"):
        meeting_type = data.split("_")[-1]
        user_state.data["meeting_type"] = meeting_type
        if meeting_type == "offline":
            # –î–ª—è –æ—Ñ–ª–∞–π–Ω –≤—Å—Ç—Ä–µ—á —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–∏—Ä–∞–µ–º –∞—É–¥–∏—Ç–æ—Ä–∏—é
            keyboard = {"inline_keyboard": []}
            for room in AVAILABLE_ROOMS:
                keyboard["inline_keyboard"].append([{
                    "text": f"üè¢ {room}",
                    "callback_data": f"select_room_{room}"
                }])
            keyboard["inline_keyboard"].append([{"text": "üîô –û—Ç–º–µ–Ω–∞", "callback_data": "create_meeting"}])
            send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∞—É–¥–∏—Ç–æ—Ä–∏—é:", reply_markup=keyboard)
        else:
            # –î–ª—è –æ–Ω–ª–∞–π–Ω –≤—Å—Ç—Ä–µ—á —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω–∞–∑–≤–∞–Ω–∏—é
            user_state.state = "awaiting_meeting_title"
            send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏:")
    elif data.startswith("select_room_"):
        room = data.split("_")[-1]
        user_state.data["room"] = room
        user_state.state = "awaiting_meeting_title"
        send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏:")
    elif data.startswith("select_slot_"):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞
        parts = data.split("_")
        start_time = parts[-2]
        end_time = parts[-1]
        
        result = meetings_create_request(
            chat_id,
            user_state.data["title"],
            user_state.data["meeting_type"],
            user_state.data["date"],
            start_time,
            end_time,
            user_state.data["room"]
        )
        
        if result["success"]:
            send_message(chat_id, "‚úÖ –í—Å—Ç—Ä–µ—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
            user_state.state = "authorized"
            send_meeting_management_menu(chat_id, user_state)
        else:
            send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")
            send_meeting_management_menu(chat_id, user_state)
    elif data.startswith("delete_meeting_"):
        meeting_id = data.split("_")[-1]
        result = meetings_delete_request(chat_id, meeting_id)
        if result["success"]:
            send_message(chat_id, "‚úÖ –í—Å—Ç—Ä–µ—á–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞")
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å—Ç—Ä–µ—á
            process_callback({"id": callback_id, "message": callback["message"], "data": "my_meetings"})
        else:
            send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")

def process_message(message):
    chat_id = message["chat"]["id"]
    text = message.get("text", "")
    
    if text.startswith('/start'):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –≤ –∫–æ–º–∞–Ω–¥–µ start
        parts = text.split()
        if len(parts) > 1:
            process_start_command(chat_id, parts[1])
        else:
            process_start_command(chat_id)
        return

    user_state = user_states.get(chat_id)
    if not user_state:
        user_state = UserState(state="initial", data={})
        user_states[chat_id] = user_state

    if text.startswith('/'):
        if text == '/start':
            process_start_command(chat_id)
        elif text == '/menu':
            if user_state.state == "authorized":
                send_main_menu(chat_id, user_state)
            else:
                process_start_command(chat_id)
        return

    if user_state.state == "awaiting_name":
        user_state.data["name"] = text
        user_state.state = "awaiting_role"
        send_role_selection(chat_id, text)
        return

    if user_state.state == "awaiting_team_name":
        user_state.data["team_name"] = text
        user_state.state = "awaiting_team_description"
        send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' –µ—Å–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è):")
        return

    elif user_state.state == "awaiting_team_description":
        description = text if text != "-" else ""
        result = team_create_request(chat_id, user_state.data["team_name"], description)
        if result["success"]:
            send_message(chat_id, "‚úÖ –ö–æ–º–∞–Ω–¥–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_state.team_name = user_state.data["team_name"]
            user_state.team_id = result["data"].get("ID")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º 'ID' –≤–º–µ—Å—Ç–æ 'id'
            user_state.state = "authorized"
            send_main_menu(chat_id, user_state)
        else:
            send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {result['error']}")
            send_main_menu(chat_id, user_state)
        return

    elif user_state.state == "awaiting_invite_code":
        result = team_join_request(chat_id, text)
        if result["success"]:
            send_message(chat_id, "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–∞–Ω–¥–µ!")
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–µ
            team_info = team_get_my_request(chat_id)
            if team_info["success"]:
                user_state.team_name = team_info["data"].get("Name", "")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º 'Name' –≤–º–µ—Å—Ç–æ 'name'
                user_state.team_id = team_info["data"].get("ID")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º 'ID' –≤–º–µ—Å—Ç–æ 'id'
            user_state.state = "authorized"
            send_main_menu(chat_id, user_state)
        else:
            send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")
            send_team_join_menu(chat_id)
        return

    elif user_state.state == "awaiting_task_title":
        user_state.data["task_title"] = text
        user_state.state = "awaiting_task_description"
        send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
    elif user_state.state == "awaiting_task_description":
        user_state.data["task_description"] = text
        user_state.state = "awaiting_task_deadline"
        send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú\n–ù–∞–ø—Ä–∏–º–µ—Ä: 2024-03-25 15:00")
        return
    elif user_state.state == "awaiting_task_deadline":
        try:
            # –ü–∞—Ä—Å–∏–º –≤–≤–µ–¥–µ–Ω–Ω—É—é –¥–∞—Ç—É
            deadline = datetime.strptime(text, "%Y-%m-%d %H:%M")
            # –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å (UTC)
            deadline = deadline.replace(tzinfo=timezone.utc)
            user_state.data["task_deadline"] = deadline.isoformat()
            
            if user_state.data["task_type"] == "personal":
                user_state.state = "awaiting_task_assignee"
                result = team_get_members_request(chat_id)
                if result["success"]:
                    members = result["data"]
                    keyboard = {"inline_keyboard": []}
                    for member in members:
                        keyboard["inline_keyboard"].append([{
                            "text": member.get("Name", "–ù/–î"),
                            "callback_data": f"assign_task_{member.get('TelegramID')}"
                        }])
                    keyboard["inline_keyboard"].append([{"text": "üîô –û—Ç–º–µ–Ω–∞", "callback_data": "manage_tasks"}])
                    send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∑–∞–¥–∞—á–∏:", reply_markup=keyboard)
                else:
                    send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {result['error']}")
                    send_task_management_menu(chat_id, user_state)
            else:
                # –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥–Ω—É—é –∑–∞–¥–∞—á—É
                result = tasks_create_request(
                    chat_id,
                    user_state.data["task_title"],
                    user_state.data["task_description"],
                    user_state.data["task_deadline"],
                    is_team=True
                )
                if result["success"]:
                    send_message(chat_id, "‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞")
                    send_task_management_menu(chat_id, user_state)
                else:
                    send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: {result['error']}")
                    send_task_management_menu(chat_id, user_state)
        except ValueError:
            send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n–§–æ—Ä–º–∞—Ç: –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú")
    elif user_state.state == "awaiting_completion_text":
        completion_text = None if text == "-" else text
        result = tasks_update_status_request(
            chat_id,
            user_state.data["updating_task_id"],
            user_state.data["new_status"],
            completion_text=completion_text
        )
        if result["success"]:
            send_message(chat_id, "‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω")
            send_my_tasks_menu(chat_id)
        else:
            send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {result['error']}")
        user_state.state = "authorized"

    elif user_state.state == "awaiting_meeting_title":
        user_state.data["title"] = text
        user_state.state = "awaiting_meeting_date"
        send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—Å—Ç—Ä–µ—á–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î\n–ù–∞–ø—Ä–∏–º–µ—Ä: 2024-03-25")
    elif user_state.state == "awaiting_meeting_date":
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
            date = datetime.strptime(text, "%Y-%m-%d")
            user_state.data["date"] = text
            
            if user_state.data["meeting_type"] == "offline":
                # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏
                result = meetings_get_available_slots_request(user_state.data["room"], text)
                if result["success"]:
                    available_slots = result["data"].get("available_slots", [])
                    if not available_slots:
                        send_message(chat_id, "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –≤ —ç—Ç–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É")
                        user_state.state = "awaiting_meeting_date"
                        send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:")
                        return

                    message = "*–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã:*\n\n"
                    keyboard = {"inline_keyboard": []}
                    
                    for slot in available_slots:
                        keyboard["inline_keyboard"].append([{
                            "text": f"üïí {slot['start']} - {slot['end']}",
                            "callback_data": f"select_slot_{slot['start']}_{slot['end']}"
                        }])
                    
                    keyboard["inline_keyboard"].append([{"text": "üîô –û—Ç–º–µ–Ω–∞", "callback_data": "create_meeting"}])
                    send_message(chat_id, message, reply_markup=keyboard)
                else:
                    send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")
                    send_meeting_management_menu(chat_id, user_state)
            else:
                # –î–ª—è –æ–Ω–ª–∞–π–Ω –≤—Å—Ç—Ä–µ—á –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è –∏–∑ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
                keyboard = {"inline_keyboard": []}
                for slot in FIXED_TIME_SLOTS:
                    keyboard["inline_keyboard"].append([{
                        "text": f"üïí {slot['start']} - {slot['end']}",
                        "callback_data": f"select_slot_{slot['start']}_{slot['end']}"
                    }])
                keyboard["inline_keyboard"].append([{"text": "üîô –û—Ç–º–µ–Ω–∞", "callback_data": "create_meeting"}])
                send_message(chat_id, "*–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –≤—Å—Ç—Ä–µ—á–∏:*", reply_markup=keyboard)
        except ValueError:
            send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n–§–æ—Ä–º–∞—Ç: –ì–ì–ì–ì-–ú–ú-–î–î")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ "authorized"
    if user_state.state == "authorized":
        send_message(chat_id, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /menu –¥–ª—è –≤—ã–∑–æ–≤–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.")

def team_create_request(chat_id, name, description):
    url = f"{BACKEND_BASE_URL}/team"
    params = {"telegram_id": str(chat_id)}
    payload = {"name": name, "description": description}
    headers = {
        "User-Agent": "TelegramBot/1.0",
        "Accept": "application/json",
        "Content-Type": "application/json",
    }
    try:
        response = requests.post(url, params=params, json=payload, headers=headers)
        if response.status_code == 200:
            return {"success": True, "data": response.json()}
        else:
            return {"success": False, "error": response.json().get("error", f"–°—Ç–∞—Ç—É—Å: {response.status_code}")}
    except Exception as e:
        return {"success": False, "error": str(e)}

def team_join_request(chat_id, invite_code):
    url = f"{BACKEND_BASE_URL}/team/join"
    payload = {"telegram_id": str(chat_id), "invite_code": invite_code}
    headers = {
        "User-Agent": "TelegramBot/1.0",
        "Accept": "application/json",
        "Content-Type": "application/json",
    }
    try:
        response = requests.post(url, json=payload, headers=headers)
        if response.status_code == 200:
            return {"success": True, "data": response.json()}
        else:
            return {"success": False, "error": response.json().get("error", f"–°—Ç–∞—Ç—É—Å: {response.status_code}")}
    except Exception as e:
        return {"success": False, "error": str(e)}

def team_get_my_request(chat_id):
    url = f"{BACKEND_BASE_URL}/team/my"
    params = {"telegram_id": str(chat_id)}
    headers = {
        "User-Agent": "TelegramBot/1.0",
        "Accept": "application/json",
    }
    try:
        response = requests.get(url, params=params, headers=headers)
        if response.status_code == 200:
            return {"success": True, "data": response.json()}
        else:
            return {"success": False, "error": response.json().get("error", f"–°—Ç–∞—Ç—É—Å: {response.status_code}")}
    except Exception as e:
        return {"success": False, "error": str(e)}

def team_get_invite_request(chat_id):
    url = f"{BACKEND_BASE_URL}/team/invite"
    params = {"telegram_id": str(chat_id)}
    headers = {
        "User-Agent": "TelegramBot/1.0",
        "Accept": "application/json",
    }
    try:
        response = requests.get(url, params=params, headers=headers)
        if response.status_code == 200:
            return {"success": True, "data": response.text}  # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
        else:
            return {"success": False, "error": response.json().get("error", f"–°—Ç–∞—Ç—É—Å: {response.status_code}")}
    except Exception as e:
        return {"success": False, "error": str(e)}

def team_get_members_request(chat_id):
    url = f"{BACKEND_BASE_URL}/team/members"
    params = {"telegram_id": str(chat_id)}
    headers = {
        "User-Agent": "TelegramBot/1.0",
        "Accept": "application/json",
    }
    try:
        response = requests.get(url, params=params, headers=headers)
        if response.status_code == 200:
            return {"success": True, "data": response.json()}
        else:
            return {"success": False, "error": response.json().get("error", f"–°—Ç–∞—Ç—É—Å: {response.status_code}")}
    except Exception as e:
        return {"success": False, "error": str(e)}

def team_kick_member_request(chat_id, kick_telegram_id):
    url = f"{BACKEND_BASE_URL}/team/kick"
    params = {
        "telegram_id": str(chat_id),
        "kick_telegram_id": str(kick_telegram_id)
    }
    headers = {
        "User-Agent": "TelegramBot/1.0",
        "Accept": "application/json",
    }
    try:
        response = requests.get(url, params=params, headers=headers)
        if response.status_code == 200:
            return {"success": True, "data": response.json()}
        else:
            return {"success": False, "error": response.json().get("error", f"–°—Ç–∞—Ç—É—Å: {response.status_code}")}
    except Exception as e:
        return {"success": False, "error": str(e)}

def team_leave_request(chat_id):
    url = f"{BACKEND_BASE_URL}/team/leave"
    params = {"telegram_id": str(chat_id)}
    headers = {
        "User-Agent": "TelegramBot/1.0",
        "Accept": "application/json",
    }
    try:
        response = requests.get(url, params=params, headers=headers)
        if response.status_code == 200:
            return {"success": True, "data": response.json()}
        else:
            return {"success": False, "error": response.json().get("error", f"–°—Ç–∞—Ç—É—Å: {response.status_code}")}
    except Exception as e:
        return {"success": False, "error": str(e)}

# –î–æ–±–∞–≤–∏–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é –∫–æ–º–∞–Ω–¥—ã
def send_team_management_menu(chat_id):
    keyboard = {
        "inline_keyboard": [
            [{"text": "üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–∞–Ω–¥–µ", "callback_data": "team_info"}],
            [{"text": "üîó –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ", "callback_data": "team_invite"}],
            [{"text": "üë• –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", "callback_data": "team_members"}],
            [{"text": "‚ùå –£–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É", "callback_data": "team_delete"}],
            [{"text": "üîô –ù–∞–∑–∞–¥", "callback_data": "back_to_main"}]
        ]
    }
    send_message(chat_id, "*–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π*\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

def send_team_join_menu(chat_id):
    keyboard = {
        "inline_keyboard": [
            [{"text": "üîó –í–≤–µ—Å—Ç–∏ –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è", "callback_data": "enter_invite_code"}],
            [{"text": "üîô –ù–∞–∑–∞–¥", "callback_data": "back_to_main"}]
        ]
    }
    send_message(chat_id, "*–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–∞–Ω–¥–µ*\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

def team_delete_request(chat_id):
    url = f"{BACKEND_BASE_URL}/team"
    params = {"telegram_id": str(chat_id)}
    headers = {
        "User-Agent": "TelegramBot/1.0",
        "Accept": "application/json",
    }
    try:
        response = requests.delete(url, params=params, headers=headers)
        if response.status_code == 200:
            return {"success": True, "data": response.json()}
        else:
            return {"success": False, "error": response.json().get("error", f"–°—Ç–∞—Ç—É—Å: {response.status_code}")}
    except Exception as e:
        return {"success": False, "error": str(e)}

def tasks_create_request(chat_id, title, description, deadline, is_team=False, assigned_to=None):
    url = f"{BACKEND_BASE_URL}/tasks"
    params = {"telegram_id": str(chat_id)}
    payload = {
        "title": title,
        "description": description,
        "deadline": deadline,
        "is_team": is_team
    }
    if assigned_to:
        payload["assigned_to"] = assigned_to

    headers = {
        "User-Agent": "TelegramBot/1.0",
        "Accept": "application/json",
        "Content-Type": "application/json",
    }
    try:
        response = requests.post(url, params=params, json=payload, headers=headers)
        if response.status_code == 200:
            return {"success": True, "data": response.json()}
        else:
            return {"success": False, "error": response.json().get("error", f"–°—Ç–∞—Ç—É—Å: {response.status_code}")}
    except Exception as e:
        return {"success": False, "error": str(e)}

def tasks_get_request(chat_id):
    url = f"{BACKEND_BASE_URL}/tasks"
    params = {"telegram_id": str(chat_id)}
    headers = {
        "User-Agent": "TelegramBot/1.0",
        "Accept": "application/json",
    }
    try:
        response = requests.get(url, params=params, headers=headers)
        if response.status_code == 200:
            return {"success": True, "data": response.json()}
        else:
            return {"success": False, "error": response.json().get("error", f"–°—Ç–∞—Ç—É—Å: {response.status_code}")}
    except Exception as e:
        return {"success": False, "error": str(e)}

def tasks_get_issued_request(chat_id):
    url = f"{BACKEND_BASE_URL}/tasks/issued"
    params = {"telegram_id": str(chat_id)}
    headers = {
        "User-Agent": "TelegramBot/1.0",
        "Accept": "application/json",
    }
    try:
        response = requests.get(url, params=params, headers=headers)
        if response.status_code == 200:
            return {"success": True, "data": response.json()}
        else:
            return {"success": False, "error": response.json().get("error", f"–°—Ç–∞—Ç—É—Å: {response.status_code}")}
    except Exception as e:
        return {"success": False, "error": str(e)}

def tasks_delete_request(chat_id, task_id):
    url = f"{BACKEND_BASE_URL}/tasks/{task_id}"
    params = {"telegram_id": str(chat_id)}
    headers = {
        "User-Agent": "TelegramBot/1.0",
        "Accept": "application/json",
    }
    try:
        response = requests.delete(url, params=params, headers=headers)
        if response.status_code == 200:
            return {"success": True, "data": response.json()}
        else:
            return {"success": False, "error": response.json().get("error", f"–°—Ç–∞—Ç—É—Å: {response.status_code}")}
    except Exception as e:
        return {"success": False, "error": str(e)}

def tasks_update_status_request(chat_id, task_id, status, completion_text=None, attachment=None):
    url = f"{BACKEND_BASE_URL}/tasks/{task_id}/status"
    params = {"telegram_id": str(chat_id)}
    payload = {"status": status}
    if completion_text:
        payload["completion_text"] = completion_text
    if attachment:
        payload["attachment"] = attachment

    headers = {
        "User-Agent": "TelegramBot/1.0",
        "Accept": "application/json",
        "Content-Type": "application/json",
    }
    try:
        response = requests.put(url, params=params, json=payload, headers=headers)
        if response.status_code == 200:
            return {"success": True, "data": response.json()}
        else:
            return {"success": False, "error": response.json().get("error", f"–°—Ç–∞—Ç—É—Å: {response.status_code}")}
    except Exception as e:
        return {"success": False, "error": str(e)}

def format_task_status(status):
    status_emojis = {
        "assigned": "üìù",
        "in_progress": "üîÑ",
        "completed": "‚úÖ"
    }
    status_names = {
        "assigned": "–ù–∞–∑–Ω–∞—á–µ–Ω–∞",
        "in_progress": "–í —Ä–∞–±–æ—Ç–µ",
        "completed": "–ó–∞–≤–µ—Ä—à–µ–Ω–∞"
    }
    return f"{status_emojis.get(status, '‚ùì')} {status_names.get(status, status)}"

def format_task_deadline(deadline_str):
    try:
        deadline = datetime.fromisoformat(deadline_str.replace('Z', '+00:00'))
        now = datetime.now(deadline.tzinfo)
        days_left = (deadline - now).days
        
        if days_left < 0:
            return "‚åõÔ∏è –°—Ä–æ–∫ –∏—Å—Ç–µ–∫"
        elif days_left == 0:
            return f"‚è≥ –°–µ–≥–æ–¥–Ω—è –≤ {deadline.strftime('%H:%M')}"
        elif days_left == 1:
            return "‚è≥ –ó–∞–≤—Ç—Ä–∞"
        else:
            return f"üìÖ –ß–µ—Ä–µ–∑ {days_left} –¥–Ω–µ–π"
    except:
        return "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ä–æ–∫"

def send_task_management_menu(chat_id, user_state: UserState):
    keyboard = {
        "inline_keyboard": [
            [{"text": "üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É", "callback_data": "create_task"}],
            [{"text": "üìã –í—ã–¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏", "callback_data": "issued_tasks"}],
            [{"text": "üîô –ù–∞–∑–∞–¥", "callback_data": "back_to_main"}]
        ]
    }
    send_message(chat_id, "*–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏*\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

def send_my_tasks_menu(chat_id):
    result = tasks_get_request(chat_id)
    if not result["success"]:
        send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á: {result['error']}")
        return

    tasks = result["data"]
    if not tasks:
        keyboard = {
            "inline_keyboard": [[{"text": "üîô –ù–∞–∑–∞–¥", "callback_data": "back_to_main"}]]
        }
        send_message(chat_id, "*–ú–æ–∏ –∑–∞–¥–∞—á–∏*\n\n_–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á_", reply_markup=keyboard)
        return

    message = "*–ú–æ–∏ –∑–∞–¥–∞—á–∏:*\n\n"
    keyboard = {"inline_keyboard": []}

    for task in tasks:
        status = format_task_status(task.get("status", "unknown"))
        deadline = format_task_deadline(task.get("deadline", ""))
        message += f"*{task.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}*\n"
        message += f"_{task.get('description', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')}_\n"
        message += f"–°—Ç–∞—Ç—É—Å: {status}\n"
        message += f"–°—Ä–æ–∫: {deadline}\n\n"
        
        if task.get("status") != "completed":
            keyboard["inline_keyboard"].append([{
                "text": f"‚úèÔ∏è –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å: {task.get('title')}",
                "callback_data": f"update_task_status_{task.get('id')}"
            }])

    keyboard["inline_keyboard"].append([{"text": "üîô –ù–∞–∑–∞–¥", "callback_data": "back_to_main"}])
    send_message(chat_id, message, reply_markup=keyboard)

def send_issued_tasks_menu(chat_id):
    result = tasks_get_issued_request(chat_id)
    if not result["success"]:
        send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã–¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: {result['error']}")
        return

    tasks = result["data"]
    if not tasks:
        keyboard = {
            "inline_keyboard": [
                [{"text": "üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É", "callback_data": "create_task"}],
                [{"text": "üîô –ù–∞–∑–∞–¥", "callback_data": "manage_tasks"}]
            ]
        }
        send_message(chat_id, "*–í—ã–¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏*\n\n_–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≤—ã–¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á_", reply_markup=keyboard)
        return

    message = "*–í—ã–¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:*\n\n"
    keyboard = {"inline_keyboard": []}

    for task in tasks:
        status = format_task_status(task.get("status", "unknown"))
        deadline = format_task_deadline(task.get("deadline", ""))
        assigned_to = task.get("assigned_to", "–ö–æ–º–∞–Ω–¥–∞" if task.get("is_team") else "–ù/–î")
        
        message += f"*{task.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}*\n"
        message += f"_{task.get('description', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')}_\n"
        message += f"–ö–æ–º—É: {assigned_to}\n"
        message += f"–°—Ç–∞—Ç—É—Å: {status}\n"
        message += f"–°—Ä–æ–∫: {deadline}\n\n"
        
        keyboard["inline_keyboard"].append([{
            "text": f"‚ùå –£–¥–∞–ª–∏—Ç—å: {task.get('title')}",
            "callback_data": f"delete_task_{task.get('id')}"
        }])

    keyboard["inline_keyboard"].extend([
        [{"text": "üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É", "callback_data": "create_task"}],
        [{"text": "üîô –ù–∞–∑–∞–¥", "callback_data": "manage_tasks"}]
    ])
    
    send_message(chat_id, message, reply_markup=keyboard)

def send_meeting_management_menu(chat_id, user_state: UserState):
    keyboard = {
        "inline_keyboard": [
            [{"text": "üìù –°–æ–∑–¥–∞—Ç—å –≤—Å—Ç—Ä–µ—á—É", "callback_data": "create_meeting"}],
            [{"text": "üìÖ –°–ø–∏—Å–æ–∫ –≤—Å—Ç—Ä–µ—á", "callback_data": "list_meetings"}],
            [{"text": "üîô –ù–∞–∑–∞–¥", "callback_data": "back_to_main"}]
        ]
    }
    send_message(chat_id, "*–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∞–º–∏*\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

def meetings_create_request(chat_id, title, meeting_type, date, start_time, end_time, room=None):
    url = f"{BACKEND_BASE_URL}/meetings"
    params = {"telegram_id": str(chat_id)}
    payload = {
        "title": title,
        "meeting_type": meeting_type,
        "date": date,
        "start_time": start_time,
        "end_time": end_time,
    }
    if room:
        payload["room"] = room

    headers = {
        "User-Agent": "TelegramBot/1.0",
        "Accept": "application/json",
        "Content-Type": "application/json",
    }
    try:
        response = requests.post(url, params=params, json=payload, headers=headers)
        if response.status_code == 200:
            return {"success": True, "data": response.json()}
        else:
            return {"success": False, "error": response.json().get("error", f"–°—Ç–∞—Ç—É—Å: {response.status_code}")}
    except Exception as e:
        return {"success": False, "error": str(e)}

def meetings_get_available_slots_request(room, date):
    url = f"{BACKEND_BASE_URL}/meetings/available-slots"
    params = {
        "room": room,
        "date": date
    }
    headers = {
        "User-Agent": "TelegramBot/1.0",
        "Accept": "application/json",
    }
    try:
        response = requests.get(url, params=params, headers=headers)
        if response.status_code == 200:
            return {"success": True, "data": response.json()}
        else:
            return {"success": False, "error": response.json().get("error", f"–°—Ç–∞—Ç—É—Å: {response.status_code}")}
    except Exception as e:
        return {"success": False, "error": str(e)}

def meetings_get_my_request(chat_id):
    url = f"{BACKEND_BASE_URL}/meetings/my"
    params = {"telegram_id": str(chat_id)}
    headers = {
        "User-Agent": "TelegramBot/1.0",
        "Accept": "application/json",
    }
    try:
        response = requests.get(url, params=params, headers=headers)
        if response.status_code == 200:
            return {"success": True, "data": response.json()}
        else:
            return {"success": False, "error": response.json().get("error", f"–°—Ç–∞—Ç—É—Å: {response.status_code}")}
    except Exception as e:
        return {"success": False, "error": str(e)}

def meetings_delete_request(chat_id, meeting_id):
    url = f"{BACKEND_BASE_URL}/meetings/{meeting_id}"
    params = {"telegram_id": str(chat_id)}
    headers = {
        "User-Agent": "TelegramBot/1.0",
        "Accept": "application/json",
    }
    try:
        response = requests.delete(url, params=params, headers=headers)
        if response.status_code == 200:
            return {"success": True, "data": response.json()}
        else:
            return {"success": False, "error": response.json().get("error", f"–°—Ç–∞—Ç—É—Å: {response.status_code}")}
    except Exception as e:
        return {"success": False, "error": str(e)}

def format_meeting_datetime(date_str):
    try:
        # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É –≤ datetime –æ–±—ä–µ–∫—Ç
        dt = datetime.fromisoformat(date_str.replace('Z', '+00:00'))
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —É–¥–æ–±–Ω—ã–π –¥–ª—è —á—Ç–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç
        return dt.strftime("%d.%m.%Y %H:%M")
    except:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è"

def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...")
    offset = None

    while True:
        try:
            updates = get_updates(offset)
            if updates.get("ok"):
                for update in updates["result"]:
                    offset = update["update_id"] + 1

                    if "callback_query" in update:
                        process_callback(update["callback_query"])
                    elif "message" in update:
                        process_message(update["message"])

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
            time.sleep(5)
            continue

        time.sleep(1)

if __name__ == '__main__':
    main()
